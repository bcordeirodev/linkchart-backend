name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.LINK_CHART_ACTION_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        echo "StrictHostKeyChecking no" >> ~/.ssh/config

    - name: Deploy to server
      run: |
        ssh -o StrictHostKeyChecking=no root@138.197.121.81 << 'ENDSSH'
          cd /var/www/linkchartapi

          # Limpar backups antigos (manter apenas os 3 mais recentes)
          echo "🧹 Limpando backups antigos..."
          ls -t .env.backup.* 2>/dev/null | tail -n +4 | xargs rm -f 2>/dev/null || true

          # Pull latest changes
          echo "⬇️ Baixando alterações do repositório..."
          git fetch origin
          git reset --hard origin/main

          # Backup current .env if exists
          if [ -f .env ]; then
            echo "💾 Criando backup do .env atual..."
            cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
          fi

          # Copy production environment
          echo "📋 Copiando configurações de produção..."
          cp .env.production .env

          # Configurar JWT_SECRET do GitHub Secrets
          echo "🔐 Configurando JWT_SECRET do GitHub Secrets..."
          sed -i "s/JWT_SECRET=.*/JWT_SECRET=${{ secrets.JWT_SECRET }}/" .env

          # DB e Redis já estão configurados corretamente no .env.production
          echo "✅ DB_PASSWORD e REDIS_PASSWORD já configurados no .env.production"

          # Debug: Verificar se JWT_SECRET foi configurado corretamente
          echo "🔍 Verificando JWT_SECRET..."
          if grep -q "JWT_SECRET=" .env && [ "$(grep 'JWT_SECRET=' .env | cut -d'=' -f2 | wc -c)" -gt 10 ]; then
            echo "✅ JWT_SECRET configurado corretamente"
          else
            echo "❌ JWT_SECRET não configurado ou muito curto"
            exit 1
          fi

          # Verificar outras configurações críticas
          echo "🔧 Verificando configurações críticas..."
          grep "APP_ENV=production" .env && echo "✅ APP_ENV correto" || echo "⚠️ APP_ENV pode estar incorreto"
          grep "APP_DEBUG=false" .env && echo "✅ APP_DEBUG correto" || echo "⚠️ APP_DEBUG pode estar incorreto"
          grep "DB_PASSWORD=" .env && echo "✅ DB_PASSWORD configurado" || echo "❌ DB_PASSWORD não encontrado"
          grep "REDIS_PASSWORD=" .env && echo "✅ REDIS_PASSWORD configurado" || echo "❌ REDIS_PASSWORD não encontrado"

          # Garantir permissões corretas
          chmod 644 .env
          echo "✅ Permissões do .env configuradas"

          # Parar containers
          echo "🛑 Parando containers..."
          docker compose -f docker-compose.prod.yml down || true

          # Build and restart containers
          echo "🏗️ Rebuilding containers..."
          docker compose -f docker-compose.prod.yml build

          echo "🚀 Iniciando containers..."
          docker compose -f docker-compose.prod.yml up -d

          # Wait for containers to be ready
          echo "⏳ Aguardando containers ficarem prontos..."
          sleep 20

          # Verificar se containers estão rodando
          echo "🔍 Verificando status dos containers..."
          docker ps --filter "name=linkchartapi" --filter "status=running" | grep linkchartapi && echo "✅ App container rodando" || echo "❌ App container com problema"
          docker ps --filter "name=linkchartdb" --filter "status=running" | grep linkchartdb && echo "✅ Database container rodando" || echo "❌ Database container com problema"
          docker ps --filter "name=linkchartredis" --filter "status=running" | grep linkchartredis && echo "✅ Redis container rodando" || echo "❌ Redis container com problema"

          # Run Laravel API optimizations (sem view:cache)
          echo "⚡ Executando otimizações da API Laravel..."
          docker exec linkchartapi php /var/www/artisan config:clear
          docker exec linkchartapi php /var/www/artisan cache:clear
          docker exec linkchartapi php /var/www/artisan config:cache
          docker exec linkchartapi php /var/www/artisan route:cache

          # Verificar se JWT está funcionando corretamente
          echo "🧪 Testando configuração JWT..."
          JWT_CONFIG=$(docker exec linkchartapi php /var/www/artisan tinker --execute="echo strlen(config('jwt.secret'));" 2>/dev/null | tail -1)
          if [ "$JWT_CONFIG" -gt 10 ]; then
            echo "✅ JWT_SECRET carregado corretamente no Laravel (length: $JWT_CONFIG)"
          else
            echo "❌ JWT_SECRET não carregado corretamente ou muito curto: $JWT_CONFIG"
            echo "🔧 Tentando corrigir cache do Laravel..."
            docker exec linkchartapi php /var/www/artisan config:clear
            docker exec linkchartapi php /var/www/artisan config:cache
          fi

          # Testar conexão com banco e Redis
          echo "🔗 Testando conexões..."
          docker exec linkchartapi php /var/www/artisan tinker --execute="DB::connection()->getPdo(); echo 'Database OK';" || echo "❌ Problema na conexão com banco"
          docker exec linkchartapi php /var/www/artisan tinker --execute="Cache::store('redis')->put('test', 'ok'); echo 'Redis OK';" || echo "❌ Problema na conexão com Redis"

          # Configurar diretórios essenciais primeiro
          echo "🔧 Configurando diretórios essenciais..."
          docker exec linkchartapi /var/www/setup-production-dirs.sh

          # Limpar todos os caches após mudanças
          echo "🧹 Limpando todos os caches..."
          docker exec linkchartapi php /var/www/artisan optimize:clear
          docker exec linkchartapi php /var/www/artisan config:cache

          # Health check
          echo "🏥 Executando health check..."
          sleep 5
          if curl -f http://138.197.121.81/health; then
            echo "✅ Deployment successful!"
            echo "🎉 Aplicação está funcionando corretamente"
          else
            echo "❌ Deployment failed - executando rollback"
            docker compose -f docker-compose.prod.yml down

            # Tentar restaurar backup
            BACKUP_FILE=$(ls -t .env.backup.* 2>/dev/null | head -1)
            if [ -n "$BACKUP_FILE" ]; then
              echo "📦 Restaurando backup: $BACKUP_FILE"
              cp "$BACKUP_FILE" .env
            else
              echo "📋 Usando .env.production como fallback"
              cp .env.production .env
            fi

            docker compose -f docker-compose.prod.yml up -d
            exit 1
          fi
        ENDSSH

    - name: Verify deployment
      run: |
        sleep 10
        echo "🔍 Verificação final de produção..."
        if curl -f http://138.197.121.81/health; then
          echo "✅ Production deployment verified!"

          # Teste adicional da API
          response=$(curl -s -o /dev/null -w "%{http_code}" http://138.197.121.81/api/links)
          if [ "$response" == "401" ]; then
            echo "✅ API respondendo corretamente (401 - autenticação necessária)"
          else
            echo "⚠️ API resposta inesperada: $response"
          fi
        else
          echo "❌ Production verification failed!"
          exit 1
        fi

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🚀 Production deployment completed successfully!"
          echo "📊 Status dos serviços:"
          echo "  ✅ Aplicação Laravel"
          echo "  ✅ PostgreSQL Database"
          echo "  ✅ Redis Cache"
          echo "  ✅ Nginx Proxy"
          echo "  ✅ JWT Authentication"
        else
          echo "💥 Production deployment failed!"
          echo "🔍 Verifique os logs acima para identificar o problema"
        fi
