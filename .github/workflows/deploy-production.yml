name: üöÄ Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete rebuild (no cache)'
        required: false
        default: false
        type: boolean

env:
  DEPLOY_HOST: 134.209.33.182
  PROJECT_PATH: /var/www/linkchartapi
  DOCKER_COMPOSE_FILE: docker-compose.prod.yml

jobs:
  deploy:
    name: üèóÔ∏è Deploy to Production Server
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 20

    steps:
    - name: üì¶ Checkout code
      uses: actions/checkout@v4

    - name: üîê Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

    - name: üåê Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        echo "Host 134.209.33.182" >> ~/.ssh/config
        echo "    StrictHostKeyChecking no" >> ~/.ssh/config
        echo "    UserKnownHostsFile /dev/null" >> ~/.ssh/config

    - name: üöÄ Deploy to Production Server
      env:
        SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      run: |
        echo "üîÑ Conectando ao servidor..."
        max_attempts=3
        delay=10

        for attempt in $(seq 1 $max_attempts); do
          echo "üîÑ Tentativa SSH $attempt/$max_attempts..."

          if [ $attempt -gt 1 ]; then
            sleep $delay
          fi

          if ssh -o ConnectTimeout=15 -o BatchMode=yes -o StrictHostKeyChecking=no root@${{ env.DEPLOY_HOST }} << 'ENDSSH'
            export SENDGRID_API_KEY="$SENDGRID_API_KEY"
            set -e
            cd ${{ env.PROJECT_PATH }}

          # Fun√ß√£o de rollback
          rollback() {
            echo "üîÑ EXECUTANDO ROLLBACK..."
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down --timeout 60 || true
            BACKUP_FILE=$(ls -t .env.backup.* 2>/dev/null | head -1)
            if [ -n "$BACKUP_FILE" ]; then
              cp "$BACKUP_FILE" .env
            else
              cp .env.production .env
            fi
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d
            exit 1
          }

          # Prepara√ß√£o
          echo "üßπ Preparando ambiente..."
          ls -t .env.backup.* 2>/dev/null | tail -n +8 | xargs rm -f 2>/dev/null || true
          git fetch origin && git reset --hard origin/main

          if [ -f .env ]; then
            cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
          fi

          # Configurar SendGrid ANTES do build
          echo "üìß Configurando SendGrid no .env.production..."
          if [ -n "$SENDGRID_API_KEY" ]; then
            sed -i '/^SENDGRID_API_KEY=/d' .env.production
            sed -i '/^MAIL_PASSWORD=/d' .env.production
            echo "SENDGRID_API_KEY=$SENDGRID_API_KEY" >> .env.production
            echo "MAIL_PASSWORD=$SENDGRID_API_KEY" >> .env.production
            echo "‚úÖ SendGrid configurado"
          else
            echo "‚ùå ERRO: SENDGRID_API_KEY n√£o definida"
            rollback
          fi

          # Copiar .env.production para .env
          cp .env.production .env

          # Valida√ß√µes b√°sicas
          grep -q "APP_ENV=production" .env || { echo "‚ùå APP_ENV incorreto"; rollback; }
          grep -q "^MAIL_PASSWORD=SG\." .env || { echo "‚ùå SendGrid n√£o configurada"; rollback; }
          chmod 644 .env

          # Deploy
          echo "üõë Parando containers..."
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down --timeout 60 || true

          if [ "${{ inputs.force_rebuild }}" = "true" ]; then
            docker system prune -f && docker image prune -a -f
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} build --no-cache --parallel
          else
            docker image prune -f
            docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} build --parallel
          fi

          echo "üöÄ Iniciando servi√ßos..."
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d

          # Health checks
          echo "‚è≥ Aguardando servi√ßos..."
          timeout 120 bash -c 'until docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} exec -T database pg_isready -U linkchartuser -d linkchartprod >/dev/null 2>&1; do sleep 5; done' || rollback
          timeout 120 bash -c 'until docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} exec -T redis redis-cli -a linkchartredis123 ping >/dev/null 2>&1; do sleep 5; done' || rollback
          timeout 180 bash -c 'until docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps | grep -q "linkchartapi.*Up"; do sleep 10; done' || rollback

          sleep 15

          # Configurar permiss√µes e diret√≥rios
          echo "üîß Configurando permiss√µes..."
          docker cp docker/scripts/fix-permissions.sh linkchartapi:/var/www/fix-permissions.sh
          docker exec linkchartapi chmod +x /var/www/fix-permissions.sh
          docker exec linkchartapi /var/www/fix-permissions.sh || rollback

          # Configurar cache
          docker exec linkchartapi mkdir -p /var/www/storage/framework/cache/data
          docker exec linkchartapi chmod -R 775 /var/www/storage/framework/cache
          docker exec linkchartapi chown -R www-data:www-data /var/www/storage/framework/cache

          # Configurar logs
          echo "üîß Configurando logs..."
          docker exec linkchartapi mkdir -p /var/www/storage/logs
          docker exec linkchartapi chmod -R 777 /var/www/storage/logs/
          docker exec linkchartapi chown -R www-data:www-data /var/www/storage/logs/
          docker exec linkchartapi touch /var/www/storage/logs/laravel.log
          docker exec linkchartapi chmod 666 /var/www/storage/logs/laravel.log
          docker exec linkchartapi chown www-data:www-data /var/www/storage/logs/laravel.log

          # Testar logs
          LOG_TEST=$(docker exec linkchartapi sh -c "echo 'Deploy test' >> /var/www/storage/logs/laravel.log 2>&1 && echo 'SUCCESS' || echo 'FAILED'")
          if [ "$LOG_TEST" != "SUCCESS" ]; then
            docker exec linkchartapi chmod -R 777 /var/www/storage/
            docker exec linkchartapi chown -R www-data:www-data /var/www/storage/
          fi

          # Otimiza√ß√µes Laravel
          echo "‚ö° Otimiza√ß√µes Laravel..."
          docker exec linkchartapi php /var/www/artisan config:clear || rollback
          docker exec linkchartapi php /var/www/artisan cache:clear || rollback
          docker exec linkchartapi php /var/www/artisan route:clear || rollback
          docker exec linkchartapi php /var/www/artisan view:clear || rollback
          docker exec linkchartapi php /var/www/artisan storage:link || rollback
          docker exec linkchartapi php /var/www/artisan config:cache || rollback
          docker exec linkchartapi php /var/www/artisan route:cache || rollback
          docker exec linkchartapi php /var/www/artisan view:cache || rollback

          # Migrations
          echo "üóÑÔ∏è Executando migrations..."
          sleep 10
          docker exec linkchartapi php /var/www/artisan migrate:status || rollback

          MIGRATION_SUCCESS=false
          for attempt in {1..3}; do
            if docker exec linkchartapi php /var/www/artisan migrate --force; then
              MIGRATION_SUCCESS=true
              break
            else
              [ $attempt -lt 3 ] && sleep 10
            fi
          done

          [ "$MIGRATION_SUCCESS" = false ] && rollback

          # Corre√ß√£o final de permiss√µes
          echo "üîß Corre√ß√£o final de permiss√µes..."
          docker exec linkchartapi chmod -R 777 /var/www/storage/ || true
          docker exec linkchartapi chown -R www-data:www-data /var/www/storage/ || true
          docker exec linkchartapi touch /var/www/storage/logs/laravel.log
          docker exec linkchartapi chmod 666 /var/www/storage/logs/laravel.log
          docker exec linkchartapi chown www-data:www-data /var/www/storage/logs/laravel.log

          # Verifica√ß√µes b√°sicas
          echo "üß™ Verifica√ß√µes b√°sicas..."
          sleep 10
          docker exec linkchartapi php /var/www/artisan tinker --execute="DB::connection()->getPdo(); echo 'DB_OK';" 2>/dev/null | grep -q "DB_OK" || rollback
          docker exec linkchartapi php /var/www/artisan tinker --execute="Cache::store('redis')->put('test', 'ok', 60); echo 'REDIS_OK';" 2>/dev/null | grep -q "REDIS_OK" || rollback

          # Health check final
          echo "üè• Health check final..."
          sleep 15
          for i in {1..3}; do
            if curl -f -s --max-time 15 http://localhost:8000/health >/dev/null 2>&1; then
              echo "‚úÖ Health check passou"
              break
            else
              [ $i -eq 3 ] && rollback
              sleep 20
            fi
          done

          echo "üéâ DEPLOYMENT CONCLU√çDO COM SUCESSO!"
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps
        ENDSSH
          then
            echo "‚úÖ SSH connection successful on attempt $attempt"
            break
          else
            echo "‚ùå SSH failed on attempt $attempt"
            if [ $attempt -eq $max_attempts ]; then
              echo "üí• SSH failed after $max_attempts attempts"
              exit 1
            fi
          fi
        done

    - name: üîç Verifica√ß√£o Final
      run: |
        echo "üîç Verifica√ß√£o final..."
        sleep 20

        if curl -f -k -s --max-time 15 https://api.linkcharts.com.br/health; then
          echo "‚úÖ Health check principal OK"
        else
          echo "‚ùå Health check principal falhou"
          exit 1
        fi

        API_RESPONSE=$(curl -s -k -o /dev/null -w "%{http_code}" --max-time 15 https://api.linkcharts.com.br/api/links)
        case $API_RESPONSE in
          401) echo "‚úÖ API protegida OK (401 - auth required)" ;;
          200|422) echo "‚ö†Ô∏è API respondeu $API_RESPONSE" ;;
          *) echo "‚ùå API resposta inesperada: $API_RESPONSE"; exit 1 ;;
        esac

        echo "üéâ VERIFICA√á√ÉO CONCLU√çDA!"

    - name: üì¢ Notifica√ß√£o de Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üöÄ PRODU√á√ÉO DEPLOYED COM SUCESSO!"
          echo "üåê URLs: https://api.linkcharts.com.br"
          echo "‚è±Ô∏è Deploy conclu√≠do em: $(date)"
        else
          echo "üí• FALHA NO DEPLOYMENT!"
          echo "üîÑ Rollback autom√°tico executado"
        fi
