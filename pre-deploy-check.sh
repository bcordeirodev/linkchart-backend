#!/bin/bash

# ======================================================
# SCRIPT DE VERIFICA√á√ÉO PR√â-DEPLOY - LINK CHART
# ======================================================

echo "üîç PR√â-DEPLOY CHECK - LINK CHART"
echo "==============================="
echo "Data: $(date)"
echo ""

ERRORS=0

# 1. Verificar se .env.production existe
echo -n "üîç Verificando .env.production: "
if [ -f ".env.production" ]; then
    echo "‚úÖ EXISTE"
else
    echo "‚ùå N√ÉO ENCONTRADO"
    ERRORS=$((ERRORS + 1))
fi

# 2. Verificar JWT_SECRET no .env.production
echo -n "üîç Verificando JWT_SECRET: "
if grep -q "JWT_SECRET=SPF" .env.production; then
    echo "‚úÖ CORRETO"
else
    echo "‚ùå INCORRETO"
    ERRORS=$((ERRORS + 1))
fi

# 3. Verificar LOG_CHANNEL
echo -n "üîç Verificando LOG_CHANNEL: "
LOG_CHANNEL=$(grep "LOG_CHANNEL=" .env.production | cut -d'=' -f2)
if [ "$LOG_CHANNEL" = "production" ]; then
    echo "‚úÖ PRODUCTION CHANNEL"
elif [ "$LOG_CHANNEL" = "daily" ]; then
    echo "‚úÖ DAILY CHANNEL (backup)"
else
    echo "‚ùå CHANNEL INV√ÅLIDO ($LOG_CHANNEL)"
    ERRORS=$((ERRORS + 1))
fi

# 4. Verificar docker-compose.prod.yml
echo -n "üîç Verificando docker-compose.prod.yml: "
if [ -f "docker-compose.prod.yml" ]; then
    echo "‚úÖ EXISTE"
else
    echo "‚ùå N√ÉO ENCONTRADO"
    ERRORS=$((ERRORS + 1))
fi

# 5. Verificar se env_file est√° configurado
echo -n "üîç Verificando env_file no docker-compose: "
if grep -q "env_file:" docker-compose.prod.yml; then
    echo "‚úÖ CONFIGURADO"
else
    echo "‚ùå N√ÉO CONFIGURADO"
    ERRORS=$((ERRORS + 1))
fi

# 6. Verificar vari√°veis cr√≠ticas
echo "üîç Verificando vari√°veis cr√≠ticas:"
for var in "APP_ENV=production" "APP_DEBUG=false" "DB_HOST=database" "REDIS_HOST=redis"; do
    echo -n "  ‚Ä¢ $var: "
    if grep -q "$var" .env.production; then
        echo "‚úÖ"
    else
        echo "‚ùå"
        ERRORS=$((ERRORS + 1))
    fi
done

# 7. Verificar se Dockerfile existe
echo -n "üîç Verificando Dockerfile: "
if [ -f "Dockerfile" ]; then
    echo "‚úÖ EXISTE"
else
    echo "‚ùå N√ÉO ENCONTRADO"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "üìä RESUMO:"
echo "========"

if [ $ERRORS -eq 0 ]; then
    echo "‚úÖ TUDO OK! Pronto para deploy."
    exit 0
else
    echo "‚ùå $ERRORS erro(s) encontrado(s). Corrija antes do deploy."
    echo ""
    echo "üîß SUGEST√ïES DE CORRE√á√ÉO:"
    echo "========================"

    if ! grep -q "JWT_SECRET=SPF" .env.production; then
        echo "‚Ä¢ Corrigir JWT_SECRET:"
        echo "  sed -i 's/JWT_SECRET=.*/JWT_SECRET=SPFbPErKrHyA5rc0Lwswwbs2EXVlwkC1DckzF6wb8CwpUxf4yLYjMtiJOVhRtWnW1A2B3C4D5E6F7G8H9I0J1K2L3M4N5O6P7Q8R9S0T/' .env.production"
    fi

    if [ "$LOG_CHANNEL" != "production" ] && [ "$LOG_CHANNEL" != "daily" ]; then
        echo "‚Ä¢ Corrigir LOG_CHANNEL:"
        echo "  sed -i 's/LOG_CHANNEL=.*/LOG_CHANNEL=daily/' .env.production"
    fi

    if ! grep -q "env_file:" docker-compose.prod.yml; then
        echo "‚Ä¢ Adicionar env_file no docker-compose.prod.yml"
    fi

    exit 1
fi
